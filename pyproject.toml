[build-system]
requires = ["setuptools>=64.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "psbench"
version = "0.2.1dev1"
authors = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
    {name = "Globus Labs"},
]
maintainers = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
]
description = "ProxyStore benchmark suite."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "adios2==2.10.1",
    "colmena==0.7.1",
    "dask==2023.5.0; python_version < '3.10'",
    "dask==2025.1.0; python_version >= '3.10'",
    "distributed==2023.5.0; python_version < '3.10'",
    "distributed==2025.1.0; python_version >= '3.10'",
    "globus-compute-endpoint==3.0.*",
    "globus-compute-sdk==3.0.*",
    "proxystore[all]==0.8.*",
    "proxystore-ex==0.1.3",
    "pydantic==2.*",
    "psutil==5.*",
    "redis==5.*",
    "requests==2.*",
]

[project.urls]
Homepage = "https://proxystore.dev"
Documentation = "https://docs.proxystore.dev"
Source = "https://github.com/proxystore/benchmarks"

[project.optional-dependencies]
dev = [
    "covdefaults>=2.2",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff>=0.2.0",
    "tox",
    "types-psutil",
    "types-redis",
    "types-requests",
    "virtualenv",
]

[tool.codespell]
skip = """
.git,
.github,
__pycache__,
build,
dist,
.*egg-info
"""

[tool.coverage.run]
plugins = ["covdefaults"]
concurrency = ["multiprocessing", "thread"]
parallel = true

[tool.mypy]
python_version = "3.12"
plugins = [
    "mypy.plugins.proper_plugin",
    "proxystore.mypy_plugin",
    "pydantic.mypy",
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "testing.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::proxystore.warnings.ExperimentalWarning",
    "ignore::DeprecationWarning:proxystore.*",
]

[tool.ruff]
line-length = 79
target-version = "py39"

[tool.ruff.format]
indent-style = "space"
quote-style = "single"

[tool.ruff.lint]
# See all rules here: https://beta.ruff.rs/docs/rules
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # PyLint
    "PLE", "PLW",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    "D10",
    # Allow builtin attribute and module name shadowing
    "A003", "A005",
    # Ruff will change all([generator]) to all(generator) because the all/any
    # generator expressions directly and the list comprehension is not needed.
    # However, coverage marks unfinished generators as not covered and
    # all/any can early exit before exhausting the generator.
    "C419",
    # Allow pytest.raises() without match
    "PT011",
    # Allow nested contexts
    "SIM117",
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["psbench", "test", "testing"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401", "D104"]
"*/*_test.py" = ["D10"]
"psbench/*" = ["D10", "PT"]
"tests/conftest.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
exclude = ["tests*", "testing*"]
namespaces = false
